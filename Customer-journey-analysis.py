# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kxxETgDYTwSIna91m-zRp7HA1st_B-DK
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as mtp

dataset =pd.read_csv('/content/sample_data/mnist_test.csv')

dataset

X =dataset.iloc[:,:-1].values

X

Y = dataset.iloc[:,3].values

Y

df=dataset.isnull().sum()

df

df = dataset.dropna

df

help()

dataset.describe()

columns = dataset.columns

columns

from sklearn.impute import SimpleImputer

missing_values = np.nan

imputers =SimpleImputer(missing_values='NaN',strategy='mean' )

imputers

import  numpy as np
import pandas as pd
import os
from sklearn.preprocessing import StandardScaler ,OneHotEncoder
from sklearn.compose import ColumnTransformer
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.ticker import PercentFormatter

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('/content/Customer behaviour Tourism.csv')

df.head(10)

df.columns

funnel_data =df[['UserID','Yearly_avg_view_on_travel_page','Yearly_avg_comment_on_travel_page','Taken_product']].copy()
funnel_stages = ['View Travel Page', 'Comment on Travel Page', 'Buy Product']

funnel_data['Buy Product'] =(funnel_data['Taken_product'] =='Yes').astype(int)

funnel_data['View Travel Page'] = funnel_data['Yearly_avg_view_on_travel_page'].apply(lambda x:1 if x > 0 else 0)

funnel_data['Comment on Travel Page'] = funnel_data['Yearly_avg_comment_on_travel_page'].apply(lambda x:1 if x>0 else 0)

funnel_percentages =[]
for stage in funnel_stages:
  percentage = funnel_data[stage].mean() * 100
  funnel_percentages.append(percentage)


plt.figure(figsize=(30,3))
plt.bar(funnel_stages,funnel_percentages,color='skyblue')
plt.title('Customer Journey')
plt.xlabel('Funnel Stage')
plt.ylabel('Percentage of users')

plt.gca().yaxis.set_major_formatter(PercentFormatter(decimals =1))
plt.show()

plt.figure(figsize=(20,8))
sns.boxplot(x ='preferred_location_type', y ='Daily_Avg_mins_spend_on_traveling_page',data=df,palette ='viridis')
plt.title('Distribution of daily avg minutes spent on traveling page by location type')
plt.xlabel('preffered location type')
plt.ylabel('daily avg minutes spent')
plt.show()

df['yearly_avg_Outstation_checkins'] = pd.to_numeric(df['yearly_avg_Outstation_checkins'],errors='coerce')

bins = [0,5,10,15,20,25,30, float('inf')]
labels =['0-5','6-10','11-15','16-20','21-25','26-30','30+']
df['Outstation_checkin_bins'] = pd.cut(df['yearly_avg_Outstation_checkins'],
                                       bins=bins,labels=labels,right=False)

df['Taken_product'] = (df['Taken_product'] =='Yes').astype(int)
purchase_rate = df.groupby('Outstation_checkin_bins')['Taken_product'].mean()

plt.figure(figsize=(12,6))
sns.barplot(x=purchase_rate.index,y=purchase_rate.values,palette='coolwarm')

plt.title('relationship between out of station check ins and ticket purch ase rate')
plt.xlabel('yearly avg out of station check -ins')
plt.ylabel('average ticket purchase rate')
plt.show()

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

freatures_clusterings = ['Yearly_avg_view_on_travel_page','yearly_avg_Outstation_checkins','Daily_Avg_mins_spend_on_traveling_page']
df_clustering= df[freatures_clusterings].dropna()
X=df_clustering

scaler =StandardScaler()
X_scaled =scaler.fit_transform(X)

wcss =[]
for i in range(1,11):
    kmeans =KMeans(n_clusters=i ,  random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(50,6))
plt.plot(range(1,11),wcss ,marker='o',linestyle='--')
plt.title('elbow method for optimal k')
plt.xlabel('numbers of clusters(k)')
plt.ylabel('Within-Cluster Sum of Squares (WCSS)')
plt.show()

optimal_k = 3
kmeans = KMeans(n_clusters=optimal_k ,random_state=42)
df_clustering['Cluster'] = kmeans.fit_predict(X_scaled)

df = pd.merge(df,df_clustering[['Cluster']],left_index=True,right_index=True,how='left')

sns.pairplot(df,hue='Cluster',palette='viridis',diag_kind='kde',vars=freatures_clusterings)
plt.suptitle('Customer Segmentation Using K- Means Clustering ',y=1.02)
plt.show()

